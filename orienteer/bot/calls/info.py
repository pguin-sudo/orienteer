from orienteer.bot.calls.abstract import AbstractCall
from orienteer.bot.utils import embeds
from orienteer.bot.utils.content_locale import Errors, Results
from orienteer.general.config import CURRENCY_SIGN
from orienteer.general.data.orienteer.services import (
    promo,
    sponsors,
    transactions,
)
from orienteer.general.data.requests import hub
from orienteer.general.data.ss14.services import (
    playtime,
    bans,
    seen_time,
    admin_rank,
    whitelist,
    chars,
)
from orienteer.general.formatting.player import ping
from orienteer.general.formatting.time import *
from orienteer.general.utils.dtos import UserDTO


class Status(AbstractCall):
    async def __call__(self) -> None:
        server_data = await hub.find_server_data("ss14://78.29.37.125:1212/")

        if server_data is None:
            await self.interaction.edit_original_message(
                embed=embeds.result_message(
                    '–°—Ç–∞—Ç—É—Å "Amadis ‚öîÔ∏è" - <:beer:1180521543390986324>:',
                    "**–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö**",
                    0xEB0C17,
                )
            )
            return

        preset = server_data["preset"]
        hidden_preset = (
            preset if preset not in ("–Ø–¥–µ—Ä–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∏–∫–∏", "–ü—Ä–µ–¥–∞—Ç–µ–ª–∏") else "–°–µ–∫—Ä–µ—Ç"
        )

        text = (
            f"**–†–µ–∂–∏–º:** {hidden_preset}\n"
            f'**–ò–≥—Ä–æ–∫–∏:** {server_data["players"]}/{server_data["soft_max_players"]}\n'
            f'**–†–∞—É–Ω–¥ ‚Ññ** {server_data["round_id"]}'
        )

        run_level = server_data["run_level"]
        if run_level == 0:
            text += "\n**–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—É–Ω–¥–∞**"
            color = 0xBB61E8
        elif run_level == 1:
            time_string = server_data["round_start_time"]

            given_time = datetime.strptime(time_string[:-9], "%Y-%m-%dT%H:%M:%S")
            current_time = datetime.now() + timedelta(hours=-3)

            time_difference = current_time - given_time

            text += f"\n**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—É–Ω–¥–∞:** {get_formatted_timedelta(time_difference)}"
            text += f'\n**–ö–∞—Ä—Ç–∞:** {server_data["map"]}'
            color = 0x5C85D6
        else:
            color = 0xEB0C17

        if server_data["panic_bunker"]:
            text += "\n**–ë—É–Ω–∫–µ—Ä**"
            color = 0xEB0C17

        await self.interaction.edit_original_message(
            embed=embeds.result_message(
                '–°—Ç–∞—Ç—É—Å "Amadis ‚öîÔ∏è" - <:nobeer:1180521621212114995>:', text, color
            )
        )


class Roles(AbstractCall):
    async def __call__(self, user_dto: UserDTO) -> None:
        all_roles = await playtime.get_formatted_grouped_trackers(user_dto.user_id)
        if all_roles is None:
            embed = embeds.error_message(content=Errors.no_playtime_info.value)
            await self.interaction.edit_original_message(embed=embed)

        embed = embeds.result_message(
            f"–ù–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {user_dto.ckey}:", f"–û–±—â–µ–µ: {all_roles[10]}"
        )

        (
            ""
            if all_roles[0] == ""
            else embed.add_field(
                name="–°–µ—Ä–≤–∏—Å–Ω—ã–π –æ—Ç–¥–µ–ª:", value=all_roles[0], inline=False
            )
        )
        (
            ""
            if all_roles[1] == ""
            else embed.add_field(
                name="–ò–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π –æ—Ç–¥–µ–ª:", value=all_roles[1], inline=False
            )
        )
        (
            ""
            if all_roles[2] == ""
            else embed.add_field(
                name="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç–¥–µ–ª:", value=all_roles[2], inline=False
            )
        )
        (
            ""
            if all_roles[3] == ""
            else embed.add_field(
                name="–°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:", value=all_roles[3], inline=False
            )
        )
        (
            ""
            if all_roles[4] == ""
            else embed.add_field(
                name="–û—Ç–¥–µ–ª —Å–Ω–∞–±–∂–µ–Ω–∏—è:", value=all_roles[4], inline=False
            )
        )
        (
            ""
            if all_roles[5] == ""
            else embed.add_field(
                name="–ù–∞—É—á–Ω—ã–π –æ—Ç–¥–µ–ª:", value=all_roles[5], inline=False
            )
        )
        (
            ""
            if all_roles[6] == ""
            else embed.add_field(name="–°–∏–Ω—Ç–µ—Ç—ã:", value=all_roles[6], inline=False)
        )
        (
            ""
            if all_roles[7] == ""
            else embed.add_field(
                name="–û—Ç–¥–µ–ª –∫–æ–º–∞–Ω–¥–æ–≤–∞–Ω–∏—è:", value=all_roles[7], inline=False
            )
        )
        (
            ""
            if all_roles[8] == ""
            else embed.add_field(name="–¶–µ–Ω—Ç–ö–æ–º:", value=all_roles[8], inline=False)
        )
        (
            ""
            if all_roles[9] == ""
            else embed.add_field(name="–î—Ä—É–≥–æ–µ:", value=all_roles[9], inline=False)
        )

        await self.interaction.edit_original_message(embed=embed)


class Bans(AbstractCall):
    async def __call__(self, user_dto: UserDTO) -> None:
        all_bans, total_time, total_fine = (
            await bans.get_formatted_bans_and_total_stats(user_dto.user_id)
        )
        if all_bans is None:
            await self.interaction.edit_original_message(
                embed=embeds.result_message(content=Results.no_bans_info.value)
            )
            return

        if len(all_bans) > 15:
            all_bans = all_bans[:-15]
            embed = embeds.result_message(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –±–∞–Ω–æ–≤ –∏–≥—Ä–æ–∫–∞ {user_dto.ckey}:")
        else:
            embed = embeds.result_message(f"–ë–∞–Ω—ã –∏–≥—Ä–æ–∫–∞ {user_dto.ckey}:")

        for ban in all_bans:
            embed.add_field(ban[0], ban[1], inline=False)

        if total_fine > 0:
            embed.description = f"–ò—Ç–æ–≥–æ —Å–æ —à—Ç—Ä–∞—Ñ–æ–≤: -{total_fine} {CURRENCY_SIGN}\n–°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –±–∞–Ω–æ–≤: {get_formatted_timedelta(total_time)}"
        else:
            embed.description = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç <:MF_Yelpozitiv:1198982508256165918>"
        await self.interaction.edit_original_message(embed=embed)


class Profile(AbstractCall):
    async def __call__(self, user_dto: UserDTO) -> None:
        if user_dto.discord_user_id is None:
            ping_statement = "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω üò∂‚Äçüå´Ô∏è"
        else:
            ping_statement = (
                f"–ê–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –∫–∞–∫ {ping(user_dto.discord_user_id)} ‚úÖ"
            )

        creator = await promo.get_creator_code(user_dto.user_id)
        first_seen = await seen_time.get_formatted_first_seen_time(user_dto.user_id)
        last_seen = await seen_time.get_formatted_last_seen_time(user_dto.user_id)
        all_roles = await playtime.get_formatted_grouped_trackers(user_dto.user_id)
        most_popular_role = await playtime.get_most_popular_role_name(user_dto.user_id)
        sponsor_level, color = await sponsors.get_sponsor_status_and_color(
            user_dto.user_id
        )

        a_rank = await admin_rank.get_admin_rank_name_and_time(user_dto.user_id)

        is_in_whitelist = await whitelist.check_whitelist(user_dto.user_id)
        balance_info = await transactions.get_balance(user_dto.user_id)
        ban_status = await bans.get_last_ban_status(user_dto.user_id)

        embed = embeds.result_message(
            title=f"–ü—Ä–æ—Ñ–∏–ª—å {user_dto.ckey}:",
            content=f"–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {first_seen}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {last_seen}",
        )

        if color is None:
            if ban_status == 0:
                embed.color = 0x5C85D6
                ban_status = "–ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚úÖ"
            elif ban_status == 1:
                embed.colour = 0xE84F4F
                ban_status = "–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üò∂‚Äçüå´Ô∏è"
            elif ban_status == 2:
                embed.colour = 0x222222
                ban_status = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ü™¶"
        else:
            if ban_status == 0:
                ban_status = "–ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ‚úÖ"
            elif ban_status == 1:
                ban_status = "–í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üò∂‚Äçüå´Ô∏è"
            elif ban_status == 2:
                ban_status = "–ë–µ—Å—Å—Ä–æ—á–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ü™¶"
            embed.colour = color

        embed.add_field(name="–î–∏—Å–∫–æ—Ä–¥:", value=f"{ping_statement}", inline=False)
        embed.add_field(name="–°—Ç–∞—Ç—É—Å:", value=f"{ban_status}", inline=False)
        if creator is not None:
            embed.add_field(name="–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è:", value=f"{creator}", inline=False)
        if all_roles is not None:
            embed.add_field(
                name="–ù–∞–∏–≥—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:", value=f"–û–±—â–µ–µ: {all_roles[10]}", inline=False
            )
        if most_popular_role is not None:
            embed.add_field(
                name="–õ—é–±–∏–º–∞—è —Ä–æ–ª—å:", value=f"{most_popular_role}", inline=False
            )
        if sponsor_level is not None:
            embed.add_field(name="–°—Ç–∞—Ç—É—Å —Å–ø–æ–Ω—Å–æ—Ä–∞:", value=sponsor_level, inline=False)
        if a_rank is not None:
            embed.add_field(
                name="–†–∞–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                value=f"{a_rank[0]}, —Å—Ç–∞–∂: {get_formatted_timedelta(a_rank[1])}",
                inline=False,
            )
        if is_in_whitelist:
            embed.add_field(name="Whitelist:", value="–ï—Å—Ç—å! üòä", inline=False)
        else:
            embed.add_field(
                name="Whitelist:",
                value="–ù–µ—Ç   <:EDGEHOG:1106583346835898399>",
                inline=False,
            )
        if balance_info is not None:
            embed.add_field(
                name="–ë–∞–ª–∞–Ω—Å:", value=f"{balance_info} {CURRENCY_SIGN}", inline=False
            )

        await self.interaction.edit_original_message(embed=embed)


class Chars(AbstractCall):
    async def __call__(self, user_dto: UserDTO) -> None:
        all_chars = await chars.get_formatted_chars(user_dto.user_id)
        if all_chars is None:
            await self.interaction.edit_original_message(
                embed=embeds.result_message(content=Results.no_bans_info.value)
            )
            return

        embed_array = []
        for char in all_chars:
            embed_array.append(embeds.char_embed(*char))

        await self.interaction.edit_original_message(
            content=f"## –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ {user_dto.ckey}", embeds=embed_array
        )
